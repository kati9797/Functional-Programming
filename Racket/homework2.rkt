#lang racket

;Да се дефинира процедура (pair-compose fs xs), която получава списък fs =
;(f1 f2 ... fn) от двуаргументни числови функции и списък от числа xs = (x1 x2 ... xn)
;и връща нова едноаргументна числова функция g - такава, че оценката на (g y) е равна на
;сумата ((f1 x1).(f2 x2) y) + ((f3 x3).(f4 x4) y) + ... + ((fn-1 xn-1).(fn xn) y),
;където “.” означава композиция на функции. Ако оригиналният списък с функции има нечетен
;брой елементи, то последната функция от списъка се композира с функцията идентитет id,
;която получава един аргумент и го връща без промяна.

(define fs (list *
 (λ (x y) (* x x x y))
 (λ (x y) (+ x 1 y))
 (λ (x y) (- x (+ 1 y)))
 (λ (x y) (* x y 2))))

(define xs '(1 2 3 4 5))

((pair-compose fs xs) 5)

;Задача 2. Разглеждаме ситуация на санитарна сеч на гора. n дървета са разположени в точки
;с координати x1, x2, ..., xn. Всяко дърво i има височина hi. Дърво може да се отсече и да
;се повали наляво или надясно. След това, дървото i заема един от затворените интервали
;[xi - hi, xi] или [xi, xi + hi]. Неотсеченото дърво заема една точка с координата xi. Дърво
;може да се отсече, ако интервалът, който трябва да бъде зает от падналото дърво, не
;съдържа нито една заета точка. Дървосекачите имат задача да отсекат възможно най-много дървета.
;Да се дефинира процедура (woodcutters xs), която приема списък от точкови двойки от
;вида (xi . hi), съдържащи координатата и височината на i-тото дърво, и връща
;максималния брой дървета, които могат да бъдат отсечени по зададените правила. Може да
;приемете, че точковите двойките са дадени в реда на нарастване на xi, както и че в точка с
;една и съща координата няма да има две дървета.

(define (woodcutters xs)
  (define (helper prev curr xs cnt)
    (cond [(empty? xs) (+ cnt 1)]
          [(> (- (car curr) (car prev)) (cdr curr)) (helper curr (first xs) (rest xs) (+ 1 cnt))]
          [(and (<= (- (car curr) (car prev)) (cdr curr)) (> (- (car (first xs)) (car curr)) (cdr curr))) (helper (cons (+ (car curr) (cdr curr)) (cdr curr)) (first xs) (rest xs) (+ 1 cnt))]
          [else (helper curr (first xs) (rest xs) cnt)]))
  (helper (first xs) (cadr xs) (drop xs 2) 1))


;(woodcutters '((1 . 2) (2 . 1) (5 . 10) (10 . 9) (19 . 1)))
;(woodcutters '((1 . 2) (2 . 1) (5 . 10) (10 . 9) (20 . 1)))
;(woodcutters '((10 . 4) (15 . 1) (19 . 3) (20 . 1)))
;(woodcutters '((1 . 7) (3 . 11) (6 . 12) (7 . 6) (8 . 5) (9 . 11)
; (15 . 3) (16 . 10) (22 . 2) (23 . 3) (25 . 7) (27 . 3) (34 . 5)
; (35 . 10) (37 . 3) (39 . 4) (40 . 5) (41 . 1) (44 . 1) (47 . 7)
; (48 . 11) (50 . 6) (52 . 5) (57 . 2) (58 . 7) (60 . 4) (62 . 1)
; (67 . 3) (68 . 12) (69 . 8) (70 . 1) (71 . 5) (72 . 5)
; (73 . 6) (74 . 4) ) )
;(woodcutters '((1 . 4) (6 . 5) (7 . 7) (10 . 2) (13 . 1) (15 . 4) (21 . 2) (22 . 5)))
